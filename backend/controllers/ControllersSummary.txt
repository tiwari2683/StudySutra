/**
 * ============================================================
 * üéØ ShikshaSutra Backend - Combined & Complete Controller Summary
 * ============================================================
 *
 * This file summarizes the core logic and responsibilities of
 * the backend controllers used in the ShikshaSutra EdTech platform.
 * The backend is structured around modular controllers, each
 * handling domain-specific operations like authentication,
 * course management, content structuring, and user reviews.
 *
 * ------------------------------------------------------------
 * üì© 1. üîê Password Reset Controller
 * ------------------------------------------------------------
 * Handles secure password reset functionality.
 *
 * - `resetPasswordToken`
 *   ‚Ä¢ Validates the provided email.
 *   ‚Ä¢ Generates a secure token and sets an expiry.
 *   ‚Ä¢ Sends a reset link to the user's email.
 *
 * - `resetPassword`
 *   ‚Ä¢ Accepts the reset token and new password.
 *   ‚Ä¢ Validates token and expiry.
 *   ‚Ä¢ Ensures password and confirm password match.
 *   ‚Ä¢ Hashes and updates the new password securely.
 *
 * ‚ú® Security Highlights:
 *   ‚Ä¢ Token via `crypto.randomBytes()`
 *   ‚Ä¢ Expiration window: 1 hour
 *   ‚Ä¢ Password encryption: `bcrypt`
 *
 * ------------------------------------------------------------
 * üìù 2. Rating and Review Controller
 * ------------------------------------------------------------
 * Manages user-generated reviews and course ratings.
 *
 * - `createRating`
 *   ‚Ä¢ Allows enrolled students to rate and review a course.
 *   ‚Ä¢ Prevents duplicate reviews.
 *   ‚Ä¢ Associates the review with the course and user.
 *
 * - `getAverageRating`
 *   ‚Ä¢ Calculates average rating of a course using aggregation.
 *
 * - `getAllRatingReview`
 *   ‚Ä¢ Fetches all ratings and reviews.
 *   ‚Ä¢ Populates user and course details for each review.
 *
 * ------------------------------------------------------------
 * üß© 3. Section Controller
 * ------------------------------------------------------------
 * Handles creation, updating, and deletion of course sections.
 *
 * - `createSection`
 *   ‚Ä¢ Adds a new section to a course.
 *   ‚Ä¢ Automatically links the section to the course.
 *
 * - `updateSection`
 *   ‚Ä¢ Updates section title by `sectionId`.
 *
 * - `deleteSection`
 *   ‚Ä¢ Unlinks and removes a section from a course.
 *   ‚Ä¢ Also deletes all associated subsections.
 *
 * ------------------------------------------------------------
 * üé¨ 4. SubSection Controller
 * ------------------------------------------------------------
 * Manages video-based submodules (subsections) within a section.
 *
 * - `createSubSection`
 *   ‚Ä¢ Uploads video using Cloudinary.
 *   ‚Ä¢ Creates a new subsection linked to a section.
 *
 * - `updateSubSection`
 *   ‚Ä¢ Updates subsection's title, description, or video.
 *   ‚Ä¢ Updates duration and video URL if video is changed.
 *
 * - `deleteSubSection`
 *   ‚Ä¢ Removes a subsection and unlinks it from its parent section.
 *
 * üõ† Utilities Used:
 *   ‚Ä¢ `uploadImageToCloudinary` for video handling.
 *
 * ------------------------------------------------------------
 * üìö 5. Course, User, and Additional Controllers (Not listed here)
 * ------------------------------------------------------------
 * Other modules like Course, User, Category, and Profile controllers
 * manage core functionality such as user roles, course publishing,
 * enrollment tracking, and more.
 *
 * üîç All controllers follow:
 *   ‚Ä¢ Clean validation practices
 *   ‚Ä¢ MongoDB transactions via Mongoose
 *   ‚Ä¢ Consistent JSON responses
 *   ‚Ä¢ Use of middleware for auth & role protection (in actual routes)
 *
 * ============================================================
 * ‚úÖ Built With: Node.js, Express, MongoDB, Mongoose, Cloudinary
 * ============================================================
 */
